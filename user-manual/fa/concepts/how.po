msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-15 04:35+0200\n"
"PO-Revision-Date: 2021-04-06 18:26+0000\n"
"Last-Translator: Mojtaba Golmohammadi <MojtabaGol@gmail.com>\n"
"Language-Team: Persian <https://hosted.weblate.org/projects/censorship-no/"
"how/fa/>\n"
"Language: fa\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 4.6-dev\n"

#
msgid "How does it work?"
msgstr "این مرورگر چگونه کار می‌کند؟"

msgid ""
"This section will explain CENO and Ouinet operation by going over a series "
"of scenarios. Terminology and concepts important to Ouinet will be "
"introduced (highlighted **in bold letters**) and used afterwards for "
"efficiency and to avoid confusion."
msgstr ""
"در این بخش کارکرد سنو و وینت را با مرور چندین سناریو توضیح خواهیم داد. "
"واژگان و مفاهیم مهم مربوط به وینت معرفی خواهند شد (که با **حروف برجسته** بر "
"آن‌ها تأکید می‌شود) و سپس برای کارآیی و جلوگیری از ابهام و سردرگمی به کار "
"خواهند رفت."

msgid "Accessing content directly"
msgstr "دسترسی مستقیم به محتوا"

msgid ""
"The CENO Browser is an example of an application that uses Ouinet technology"
" to retrieve and share Web content. We call such an application a Ouinet "
"**client**. When you use your client (i.e. CENO) to try to access some "
"content *X*, hosted on a Web server (which we will call *X*'s **origin** "
"server), your client tries to contact the origin server over the Internet "
"either directly or via some other machine configured to contact Web servers "
"on behalf of others (a so-called **proxy** server) and then requests the "
"desired content. This is no different from the way in which any normal Web "
"browser works."
msgstr ""
"مرورگر سنو نمونه‌ای از نرم‌افزاری است که از فناوری وینت برای بازیابی و "
"به‌اشتراک‌گذاشتن محتوای وب استفاده می‌کند. ما نرم‌افزاری این‌چنین را یک "
"**سرویس‌گیرنده‌**ی وینت می‌نامیم. وقتی شما از سرویس‌گیرنده‌تان (یعنی همان "
"سنو) در راستای تلاش برای دسترسی به محتوای *X* استفاده می‌کنید، که روی یک "
"سرور وب میزبانی می‌شود (که ما آن را سرور **اصلی** *X* می‌نامیم)، "
"سرویس‌گیرنده‌ی شما سعی می‌کند تا با سرور اصلی روی اینترنت تماس بگیرد، چه "
"مستقیم و چه از طریق ماشین دیگری که برای تماس با سرورهای وب به نیابت از "
"دیگران تنظیم شده‌اند (یک به‌اصطلاح سرور **پروکسی**)، و سپس محتوای دلخواه را "
"درخواست می‌کند. این هیچ فرقی با شیوه‌ی کار هر مرورگر معمولی وب ندارد."

msgid ""
"**Technical note:** There is in fact one small gotcha. Since the client acts"
" as an HTTP proxy running on your device, for the client to be able to "
"decrypt and act upon HTTPS content requests, the application using the "
"client (i.e. the Web browser part – like Firefox in CENO) needs to accept a "
"special certificate issued by the client itself (and only used on your "
"device). The CENO Browser already takes care of setting this certificate up "
"for its private use so that you do not need to worry."
msgstr ""
" **نکته‌ی فنی:** البته در واقع مشکل کوچکی وجود دارد. از آنجا که سرویس‌گیرنده "
"به‌عنوان یک پروکسی HTTP روی دستگاه شما اجرا می‌شود، برای این‌که سرویس‌گیرنده "
"بتواند درخواست‌های محتوای HTTPS را رمزگشایی و بر اساس آن‌ها عمل کند، نرم‌"
"افزاری که از این سرویس‌گیرنده استفاده می‌کند (یعنی بخش مرورگر وب - مانند "
"فایرفاکس در سنو) نیاز دارد تا یک گواهی خاص صادرشده از طرف خود سرویس‌گیرنده ("
"که فقط روی دستگاه شما استفاده می‌شود) را بپذیرد. مرورگر سنو پیشاپیش این "
"گواهی را برای کاربرد خصوصی‌اش فراهم می‌کند، پس نیازی نیست نگران باشید."

msgid ""
"However, these direct paths may not be available. For instance, your "
"Internet service provider (ISP) may be blocking access to *X*'s origin "
"server or the proxy because of a state order (even if other traffic is still"
" allowed). As the user of the top left client depicted below, both attempts "
"to reach content *X* (the little document close to its origin server) would "
"fail for you. You may also note the \"injector\" node on the diagram. We "
"will explain that in a moment."
msgstr ""
" با این حال، این راه‌های مستقیم شاید در دسترس نباشند. برای مثال، شرکت "
"ارائه‌دهنده‌ی خدمات اینترنتی (ISP) شما ممکن است دسترسی به سرور اصلی *X* یا "
"پروکسی آن را بر اساس یک دستور دولتی مسدود کند (حتی اگر ترافیک دیگر هنوز مجاز "
"باشد). همچون کاربر سرویس‌گیرنده‌ی بالا سمت چپ که در پایین به تصویر کشیده شده "
"است، هردو تلاش برای دسترسی به محتوای *X* (سند کوچک نزدیک به سرور اصلی آن) "
"برایتان ناکام خواهد ماند. شاید به گره «انژکتور» روی دیاگرام نیز دقت کنید. "
"این را هم‌اینک توضیح خواهیم داد."

msgid ""
"![Figure: Client cannot reach content directly](images/user-flow-0.svg)"
msgstr ""
" ![شکل: سرویس‌گیرنده نمی‌تواند مستقیماً به محتوا دسترسی داشته باشد](images/"
"user-flow-0.svg)"

msgid ""
"With a normal browser you would be out of luck. However, with Ouinet you can"
" ask other clients for their copies of content *X*, should they already have"
" a copy. Let us see how Ouinet performs this request."
msgstr ""
"با یک مرورگر معمولی شانسی نخواهید داشت. اما، با وینت می‌توانید از "
"سرویس‌گیرنده‌های دیگر کپی‌های آن‌ها از محتوای *X* را درخواست کنید، البته اگر "
"آن‌ها پیشاپیش یک کپی از آن داشته باشند. بیایید ببینیم که وینت چگونه این "
"درخواست را اجرا می‌کند."

msgid "Searching for shared content"
msgstr "جست‌وجوی محتوای مشترک"

msgid ""
"The set of all content stored by Ouinet clients is called the **distributed "
"cache**, i.e. a store which sits in no single place. But how can your client"
" find which other clients forming the cache have the desired content?"
msgstr ""
" مجموعه‌ی تمام محتوای ذخیره‌شده از سوی سرویس‌گیرندگان وینت **انبار "
"توزیع‌شده** نامیده می‌شود، یعنی انباری که در هیچ جای واحدی قرار ندارد. اما "
"سرویس‌گیرنده‌ی شما چگونه می‌تواند بفهمد که کدام سرویس‌گیرندگان دیگر سازنده‌ی "
"این انبار محتوای دلخواه را دارند؟"

msgid ""
"In any Web browser, to access content *X* it needs to know its [Uniform "
"Resource Locator](https://en.wikipedia.org/wiki/Uniform_Resource_Locator) "
"(URL), that is the address in the browser's location bar, e.g. "
"`https://example.com/foo/x`. From that URL, a normal browser would infer "
"that it has to contact the Web server called `example.com` using the HTTP "
"protocol (the language used to exchange Web resources) over SSL/TLS (a "
"security layer over TCP, the Internet's rules for programs to talk to each "
"other) and request the resource `/foo/x`."
msgstr ""
" در هر مرورگر وب، برای دسترسی به محتوای *X* مرورگر باید URL یا [مکان‌یاب "
"یک‌شکل](https://en.wikipedia.org/wiki/Uniform_Resource_Locator) آن را بشناسد،"
" که همان نشانی در مستطیل آدرس مرورگر است، مثلاً `https://example.com/foo/x`. "
"از آن URL، یک مرورگر معمولی پی خواهد برد که باید با استفاده از پروتکل HTTP ("
"زبان به‌کاررفته برای مبادله‌ی منابع وب) روی SSL/TLS (یک لایه‌ی امنیتی روی "
"TCP، قواعد اینترنت برای برنامه‌ها تا با یکدیگر مکالمه کنند) با یک سرور وب به "
"اسم `example.com` تماس بگیرد و منبع `/foo/x` را درخواست کند."

msgid ""
"Ouinet looks for the content in a different way. It uses an index not unlike"
" that of a book: in Ouinet's **distributed cache index** you look up the "
"whole URL of the content and get a list of clients holding a copy of it. The"
" index itself is distributed, with clients in charge of announcing what "
"content they have to others. Actually, only a *hint* on each URL is "
"announced, so that someone spying your device's traffic cannot tell which "
"content you have, but someone looking for a particular content can follow "
"the hints towards your client."
msgstr ""
" وینت به شیوه‌ای متفاوت به دنبال محتوا می‌گردد. این نرم‌افزار از نمایه‌ای "
"استفاده می‌کند که به نمایه‌ی یک کتاب بی‌شباهت نیست: در **نمایه‌ی انبار "
"توزیع‌شده**ی وینت شما کل URL محتوا را می‌جویید و لیستی از سرویس‌گیرندگان "
"دارای یک کپی از آن به دست می‌آورید. خود نمایه توزیع‌شده است، و سرویس‌"
"گیرندگان وظیفه دارند به دیگران اعلام کنند که چه محتوایی را دارند. در واقع، "
"فقط یک *اشاره* به هر URL اعلام می‌شود، طوری که کسی که ترافیک دستگاه شما را "
"جاسوسی می‌کند نمی‌تواند بفهمد که شما چه محتوایی را دارید، اما کسی که به "
"دنبال محتوایی خاص است می‌تواند اشاره‌ها به‌سوی سرویس‌گیرنده‌ی شما را دنبال "
"کند."

msgid ""
"**Technical note:** One way the index is implemented is using "
"[BitTorrent](https://en.wikipedia.org/wiki/BitTorrent)'s [Distributed Hash "
"Table](https://en.wikipedia.org/wiki/Distributed_hash_table) (DHT) to get "
"the addresses (IP and port) of the clients with the content. The DHT uses a "
"[Cryptographic hash "
"function](https://en.wikipedia.org/wiki/Cryptographic_hash_function) to "
"compute the table key from the content's URL and some other parameters as "
"the injector key (see below), so that several indexes can coexist."
msgstr ""
" **نکته‌ی فنی:** یک راه پیاده‌سازی نمایه استفاده از [جدول درهم‌سازی "
"توزیع‌شده](https://en.wikipedia.org/wiki/Distributed_hash_table)ی "
"[بیت‌تورنت](https://en.wikipedia.org/wiki/BitTorrent) (DHT) برای دریافت "
"نشانی‌های (IP و درگاه) سرویس‌گیرندگان با محتوا است. DHT از یک [تابع درهم‌"
"سازی رمزی](https://en.wikipedia.org/wiki/Cryptographic_hash_function) برای "
"محاسبه‌ی کلید جدول از URL محتوا و برخی پارامترهای دیگر مانند کلید انژکتور "
"است (به پایین بنگرید)، طوری که چندین نمایه بتوانند همزمان وجود داشته باشند."

msgid ""
"Also, the CENO Browser does not announce the URL of every single resource it"
" holds: with any modern page having tens or hundreds of components (images, "
"style sheets, scripts…), that would create a lot of traffic. Instead, "
"resources are grouped under the URL of the page pulling them, and only that "
"URL is announced. This is done with the help of an *ad hoc* browser "
"extension (described later on)."
msgstr ""
" افزون بر این، مرورگر سنو URL تک‌تک منابعی که در اختیار دارد را اعلام "
"نمی‌کند: از آنجا که هر صفحه‌ی امروزی ده‌ها یا صدها بخش دارد (تصاویر، برگه‌"
"های سبکی، اسکریپ‌ها...)، این باعث ایجاد ترافیک خیلی زیادی خواهد شد. در عوض، "
"منابع ذیل URL صفحه‌ای که آن‌ها را می‌کشد گروه‌بندی می‌شوند، و فقط آن URL "
"اعلام می‌گردد. این کار به کمک یک افزونه‌ی مرورگر *به این منظور* انجام می‌شود "
"(که در ادامه توصیف خواهد شد)."

msgid ""
"Clients offering some particular content over the distributed cache are said"
" to be **seeding** it or to be their *seeders* (these terms come from the "
"P2P file-sharing world). Going back to our example scenario, there are two "
"clients seeding some content. Unfortunately, one is seeding content *Y* and "
"the other one content *Z*, so your client would find no entries for content "
"*X* in the distributed cache index, as depicted below:"
msgstr ""
" سرویس‌گیرنده‌هایی که محتوای خاصی را روی انبار توزیع‌شده پیشنهاد می‌دهند به‌"
"اصطلاح آن را **دانه‌پاشی** می‌کنند یا **دانه‌پاش‌ها**ی آن‌ها هستند (این "
"اصطلاح‌ها از دنیای اشتراک فایل همتا-به-همتا گرفته شده‌اند). اگر بخواهیم به "
"سناریوی مثال‌مان بازگردیم، دو سرویس‌گیرنده هستند که محتوایی را دانه‌پاشی می‌"
"کنند. متأسفانه، یکی از آن‌ها محتوای *Y* را و دیگری محتوای *Z* را دانه‌پاشی "
"می‌کنند، بنابراین سرویس‌گیرنده‌ی شما هیچ مدخلی برای محتوای *X* در نمایه‌ی "
"انبار توزیع‌شده نخواهد یافت، همان‌طور که در پایین به تصویر کشیده شده است:"

msgid ""
"![Figure: Content not found in the distributed cache](images/user-"
"flow-1.svg)"
msgstr " ![شکل: محتوا در انبار توزیع‌شده پیدا نشد](images/user-flow-1.svg)"

msgid ""
"Fortunately, Ouinet offers a way to retrieve such content and furthermore "
"make it available to other clients in the distributed cache. Please read on "
"to learn how."
msgstr ""
" خوشبختانه، وینت راهی برای بازیابی محتوایی ازاین‌دست پیش کشیده است و افزون‌"
"براین آن را در دسترس سرویس‌گیرندگان دیگر در انبار توزیع‌شده نیز قرار می‌دهد. "
"لطفاً به خواندن ادامه دهید تا بفهمید چگونه."

msgid "Sharing new content"
msgstr " اشتراک‌گذاری محتوای جدید"

msgid "Proxies on steroids"
msgstr " پروکسی‌های تقویت‌شده"

msgid ""
"In Ouinet, there are special kinds of proxy servers called **injectors** "
"which sit in the (hopefully) free side of the Internet and try very hard to "
"stay reachable despite blocking measures:"
msgstr ""
" در وینت، انواع خاصی از سرورهای پروکسی به نام **انژکتورها** وجود دارند که در "
"بخش آزاد اینترنت قرار گرفته‌اند (دست‌کم امیدواریم چنین باشد) و سرسختانه می‌"
"کوشند تا به‌رغم اقدامات مسدودگرانه در دسترس همگان باقی بمانند:"

msgid ""
"First of all, connections between clients and injectors are encrypted (using"
" standard SSL/TLS like in HTTPS) to avoid attackers from identifying "
"injectors by eavesdropping on web traffic."
msgstr ""
" پیش از هرچیز، ارتباطات بین سرویس‌گیرنده‌ها و انژکتورها رمزگذاری‌شده‌اند (با "
"استفاده از SSL/TLS استاندارد مانند HTTPS) تا مانع شناسایی انژکتورها توسط "
"مهاجمان به‌وسیله‌ی شنود ترافیک وب شوند."

msgid ""
"By the way, injector certificates are shipped in the CENO Browser, allowing "
"it to detect attackers trying to impersonate injectors."
msgstr ""
" در ضمن، گواهی‌های انژکتورها در مرورگر سنو ذخیره می‌شوند، و به آن اجازه می‌"
"دهند تا مهاجمانی را که سعی دارند خودشان را به‌جای انژکتورها جا بزنند شناسایی "
"کند."

msgid ""
"If encryption was not sufficient, connections to injectors can use special "
"obfuscation techniques (like I2P and Tor's Pluggable Transports) to make "
"identification even more difficult."
msgstr ""

msgid ""
"Even if an injector was identified and access to it was blocked by your ISP,"
" there are several of them and it does not matter which one your client "
"contacts over the Internet."
msgstr ""

msgid ""
"Some or all injectors may be blocked, but then the set of injectors can vary"
" over time (with new ones being added)."
msgstr ""

msgid ""
"Your client need not know their Internet addresses in advance; instead, it "
"performs a lookup in the **injector swarm** (another term from P2P file "
"sharing), a single-entry distributed index similar to the distributed cache "
"index which yields the addresses of currently available injectors."
msgstr ""

msgid ""
"Finally, even if your client may not be able to reach any injector, some "
"other clients may. When a client is able to reach an injector and believes "
"itself to be reachable by other clients, it becomes a **bridge** client and "
"adds its own Internet address to the **bridge swarm**, another single-entry "
"distributed index."
msgstr ""

msgid ""
"So your client can look for such an address, connect to the bridge behind it"
" and tell it to establish another connection to an injector on its behalf, "
"creating a **tunnel** between your client and the injector. Then a "
"connection can be established between them inside of the tunnel."
msgstr ""

msgid ""
"Please note that since client-to-injector connections are encrypted, bridges"
" are not able to see the information flowing between them."
msgstr ""

msgid ""
"An injector can behave like a normal (though extra available) proxy server, "
"and this is indeed what Ouinet clients (including the CENO Browser) do "
"currently when trying to access content over a proxy. In this case, the "
"injector will neither see the actual information flowing between your client"
" and the origin server (unless it is a plain, unencrypted HTTP connection "
"itself)."
msgstr ""

msgid ""
"But there exist other tools allowing you to reach proxies in stringent "
"network interference conditions so, what is so special about Ouinet "
"injectors?"
msgstr ""

msgid "Trusting shared content"
msgstr ""

msgid ""
"Well, the point is that an injector does not just retrieve content on behalf"
" of your client, it also allows you to *share that content with others at a "
"later time, even when there is no longer access to the injector or most of "
"the Internet*."
msgstr ""

msgid ""
"You could of course download a page from your browser and copy the resulting"
" files to other people, which should be fine if you know each other. But "
"what if you received such files from an unknown person? How could you be "
"sure that the content actually came from the website it claims to, that it "
"was retrieved at a certain date or that the information in it was not "
"manipulated?"
msgstr ""

msgid ""
"We want CENO and Ouinet usage to scale and provide as much content to as "
"many people as possible, so we do want you to be able to receive content "
"from people you do not know. To enable you to accept such content, Ouinet "
"uses **content signing**: your client is configured to trust content that is"
" signed using a special key owned by injectors. Whenever a client tells an "
"injector to retrieve some Web content for sharing, the injector gets it from"
" the origin server, uses the key to sign it, and returns the signed content "
"to the client."
msgstr ""

msgid ""
"**Technical note:** In fact, the injector signs individual blocks of data as"
" they come, so even if the connection is cut in the middle while retrieving "
"a big file, the downloaded data can still be shared by the client that "
"received it."
msgstr ""

msgid ""
"Different injectors may have different keys, so you can choose which "
"injectors to trust. Picture it like this: you may trust a document signed by"
" a *notary public* from your country, no matter who gave it to you (national"
" or foreigner), while you would not be required to accept a document signed "
"by a notary from another country. The CENO Browser is already configured to "
"trust a set of injectors run by eQualitie."
msgstr ""

msgid ""
"**Technical note:** Injectors use a public/private key pair to create "
"Ed25519 signatures; public keys are small enough to allow them to be sent "
"along signatures, and encoded as 64 hexadecimal characters or 52 Base32 "
"characters. They may even be exchanged on the phone or written down on a "
"piece of paper."
msgstr ""

msgid "Content injection"
msgstr ""

msgid ""
"Remember that in our example scenario your client had already tried to "
"retrieve content *X* directly from the origin server and from other clients "
"to no avail. The client plays its last Ouinet card and tries to contact a "
"trusted injector to get a signed copy of the content that it can share with "
"other clients."
msgstr ""

msgid ""
"In the figure below you can see a possible outcome of that operation: the "
"client first tries to contact the injector directly (e.g. using an Internet "
"address that it got from the injector swarm), but sadly it is already "
"blocked by your ISP; fortunately, the bridge swarm shows the Internet "
"addresses for two other clients which are still able to reach an injector. "
"Your client opens a tunnel to the injector through one of these clients, so "
"the injector gets the request for content *X* from your client, and asks its"
" origin server for it."
msgstr ""

msgid "![Figure: Client reaches for injector](images/user-flow-2.svg)"
msgstr ""

msgid ""
"As content *X* is received by the injector, it signs it with its key, adds "
"the signature to the content and sends it back to your client via the tunnel"
" it arrived from (say, through the client sitting beyond the blocking). Once"
" the content reaches your client, it does three things:"
msgstr ""

msgid ""
"It delivers it to you (in the case of CENO, it shows the content on the "
"browser)."
msgstr ""

msgid ""
"It saves the content on your device for further seeding to other clients. It"
" will stay there for a configurable amount of time, or until you decide to "
"clear all stored content."
msgstr ""

msgid ""
"It announces in the distributed cache index that it is in possession of a "
"copy of that content, so that other clients can find it."
msgstr ""

msgid ""
"The whole combined operation of retrieval, signing, storage and announcement"
" is what we call **content injection**, as shown in the figure below."
msgstr ""

msgid ""
"![Figure: Client receives signed content from injector](images/user-"
"flow-3.svg)"
msgstr ""

msgid "Browsing under complete blocking"
msgstr ""

msgid ""
"Please note that the mechanism described above still requires that *some "
"path exists* across blocking and towards the rest of the Internet. But "
"sometimes that path will also be missing: think about complete international"
" disconnections, natural disasters, or simply excessive congestion of the "
"few existing paths (due to everybody trying to go across them). This is "
"where the real power of the distributed cache comes into play."
msgstr ""

msgid ""
"Let us imagine that after you retrieved content *X* from the injector, a "
"disaster leaves your region isolated from the world. It turns out that "
"content *X* becomes especially relevant since it describes some ways in "
"which you can help your community in such a situation."
msgstr ""

msgid ""
"At that moment a second person using the CENO Browser also tries to get that"
" content. Access to the origin server or to anything beyond your region is "
"impossible, so CENO checks the distributed cache index for that content and "
"it finds that your device is seeding it. CENO gets your Internet address "
"from the index, connects to it and requests the content as shown below."
msgstr ""

msgid ""
"![Figure: Client receives signed content from client](images/user-"
"flow-4.svg)"
msgstr ""

msgid ""
"Now that second device also holds a copy of content *X*, so it announces "
"this in the distributed cache index, thus becoming a seeder. If a third "
"person interested in that content uses the CENO Browser to retrieve it, CENO"
" will now see *two* addresses in the index for the content: your device's "
"and that of the second user. If the content is heavy (e.g. a video), this "
"third device may try to get half of it from each of the other devices (as "
"shown below), thus speeding up the download and reducing the traffic they "
"use."
msgstr ""

msgid ""
"![Figure: Client receives signed content from multiple clients](images/user-"
"flow-5.svg)"
msgstr ""

msgid ""
"Finally, the situation may get even worse, and all commercial and state "
"network infrastructure may be shut down. In this case, Ouinet and the CENO "
"Browser also have some support for *device-to-device* sharing of content "
"between two clients sitting on the same local network (e.g. connected to the"
" same Wi-Fi access point), even if the network has no access to others."
msgstr ""
